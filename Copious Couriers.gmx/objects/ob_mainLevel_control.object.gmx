<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Global Varialbes used to control pace and identify current level Biomes [Info Only] 
// NOTE SEE START MENU Creation Code for other globals for the gameplay!!!!!"!!!
global.biomeIdent = 0; // 0 = Start, 1 = Forest, 2 = Plain, 3 = Mountain, 4 = Desert, (TBC) - End
global.scrollSpeed = 1; // change this to speed up and slowdown the game (also controlled in Quit menu)
global.pause = false;
     
// Game tweaking values for visuals and gameplay of the main level ********************************************************************************
screenWidth = 640; // change this in rm_starmenu instance code if needed.
biomeScreens = 8; // Min is 3;
transFactor = 4;
roadMiddle_y = 310;
grass_road_y = 290;
grass_sky_y = 212;
hudSize = 60;
weather = 0;
encountered = false; // Event generator code
event_step = irandom_range(0,screenWidth)+2*screenWidth;

// Gameplay
// starting conditions
global.p_health = 100;
global.hunger = 100;
global.gold = 20;
global.enddistance = 200*screenWidth; // screens
global.pdistance = 0;
global.endevent = false;
Shop_Items(); // initialise the shop items - change script to add or remove items

// Object placement frequencies - calculated as = step%object frequency
ob1freq = 32;
ob2freq = 64;
ob3freq = 256; // path stones
ob4freq = 64; // Casual Clouds
// for modifing specific Biome frequencies
desertMod = 16;

// Generate the Cart on the road *Need to sort out the placement variables to make this easier to read.*
wagonWheel_1b = instance_create(65, roadMiddle_y+hudSize-16 , ob_wagon_wheel_back);
wagonWheel_2b = instance_create(140, roadMiddle_y+hudSize-16, ob_wagon_wheel_back); 
wagonWheel_3f = instance_create(45, roadMiddle_y+2+hudSize, ob_wagon_wheel_front); 
wagonWheel_3f = instance_create(120, roadMiddle_y+2+hudSize, ob_wagon_wheel_front); 
wagonWagon = instance_create(90, roadMiddle_y+hudSize-10, ob_wagon_wagon); 
wagonPlayer = instance_create(155, roadMiddle_y+hudSize+10, ob_player_character); 

// Place the initial company headquarters *Need to sort out the placement variables to make this easier to read.*
wagonWagon = instance_create(340, (grass_sky_y+100), ob_start_company); 
// *****************************************************************************************************************************************************




// [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] *********

// Seeding the Random Generator
randomize(); // improves the randomness of the level generation

// Local Variables relating to Biomes timing 
step = 0;
room_persistent = true;

// Managing the background system with initial values [DO NOT EDIT]
currentBiome = 0;
transBackground = bg_trans_plain02_forest01;
currentBackground = bg_biomeIdent0_start;
previousBiome = 0;
transitionComplete = true;
transitionOngoing = true; // This variable name and true false order is terrible - NEEDS FIXED FOR CLARITY
background_y[0] = 60;
background_y[1] = 60;

// Local Varialbes relating to weather
background_alpha[2] = 0;
bgWeatherFadeRate = 0.003;
background_y[2] = 60;
global.weather = -1;
global.snowAmount = 0;
global.mountain = biomeScreens;

global.death = false;

// [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] [DO NOT EDIT] *********


// Future Features/ Ideas
// biomeForceChange = false; // a flag to force a biome change (Future)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.scrollSpeed &gt; 0) // only do anything if the game is moving;
{

// Start of the game use the start biome code ***********************************************************************************************************
if (global.biomeIdent == 0)
{
    background_index[0] = currentBackground;
    step = (biomeScreens-1)*screenWidth;
}
// ******************************************************************************************************************************************************


// Background Management ********************************************************************************************************************************
if (global.biomeIdent != currentBiome)
{
    // Background transitions - get the correct background
    transBackground = bgtransition(currentBiome, global.biomeIdent);
    currentBackground = bgbiome(global.biomeIdent)
    
    // setup and start the transition
    background_x[1] = screenWidth;
    background_index[1] = transBackground;  
    background_hspeed[1] = -global.scrollSpeed;
    background_hspeed[0] = -global.scrollSpeed;
    transitionComplete = false;    
    transitionOngoing = false;
}

// update to the new biome once the transition is complete
if(background_x[0] == -screenWidth) 
{
     background_x[0] = screenWidth
     background_index[0] = currentBackground;
     transitionOngoing = true;
}

// Stop the transition
if(background_x[1] == -screenWidth)
{
    background_hspeed[1] = 0;
    background_hspeed[0] = 0;
    transitionComplete = true;
    
}
// ******************************************************************************************************************************************************
 

// Object Generation ************************************************************************************************************************************
if(global.endevent == false)
{

if(global.biomeIdent == 4)
{
    Mod = desertMod;
}
else
{
    Mod = 1;
}

/// Everything here  generates objects.
if(transitionOngoing == false)
{
// Generate old and new objects at half rate 
    
    if(step mod irandom_range(1,(ob1freq*transFactor)) == 0) // Main Object 1 - spawns between road and sky
    {
        if(Mod &lt; 2)
        {
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; // New Object1s
        inst = instance_create(640, ySpawn, object1(global.biomeIdent));
        }
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; // Old object1s 
        inst = instance_create(640, ySpawn, object1(previousBiome)); 
    }
    
    if(step mod irandom_range(1,(ob2freq*transFactor*Mod)) == 0) // Main Object 2 - spawns between road and sky
    {
        if(Mod &lt; 2)
        {
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; // New Object2s
        inst = instance_create(640, ySpawn, object2(global.biomeIdent));
        }
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; // Old object2s 
        inst = instance_create(640, ySpawn, object2(previousBiome)); 
    }
            
    if(step mod irandom_range(1,(ob3freq*transFactor)) == 0) // path objects  - no 3 - spawns between road and sky
    {
        ySpawn = irandom_range(roadMiddle_y - 10, roadMiddle_y + 10)+ hudSize; // New Object2s
        inst = instance_create(640, ySpawn, ob_pstone1 );
    }
    
    if(step mod irandom_range(1,(ob4freq*transFactor)) == 0) // cclouds
    {
        ySpawn = irandom_range(0, grass_sky_y)+ hudSize; // clouds
        inst = instance_create(640, ySpawn, object4(irandom_range(1,3)));
    }

}

if(transitionOngoing == true)
{
// Generate new objects at full
    if(step mod irandom_range(1,ob1freq*Mod) == 0) // Main Object 1 - spawns between road and sky
    {
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; 
        inst = instance_create(640, ySpawn, object1(global.biomeIdent));
    }
    
    if(step mod irandom_range(1,ob2freq*Mod) == 0) // Main Object 2 -  spawns between road and sky
    {
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; 
        inst = instance_create(640, ySpawn, object2(global.biomeIdent));
    }
    
    if(step mod irandom_range(1,(ob3freq*transFactor)) == 0) // path objects  - no 3 - spawns between road and sky
    {
        ySpawn = irandom_range(roadMiddle_y - 10, roadMiddle_y + 10)+ hudSize; // New Object2s
        inst = instance_create(640, ySpawn, ob_pstone1);
    }
    
    if(step mod irandom_range(1,(ob4freq*transFactor)) == 0) // cclouds
    {
        ySpawn = irandom_range(0, grass_sky_y)+ hudSize; // clouds
        inst = instance_create(640, ySpawn, object4(irandom_range(1,3)));
    }
}

}

} // endif for the game moving if at the start

// ******************************************************************************************************************************************************


// Weather Generation ***********************************************************************************************************************************
// weather not impacted by scroll speed
switch(global.weather)
{
    case 0: // Clear
        if(transitionOngoing == true)
        {
            if( background_alpha[2] &gt; 0+bgWeatherFadeRate)
            {
            background_alpha[2] -= bgWeatherFadeRate;
            if(global.snowAmount &gt; 0+bgWeatherFadeRate)
            {
                global.snowAmount -=  bgWeatherFadeRate;
            }
            }
        }
        break;
        
    case 1: // Snowing
        effect_create_above(ef_snow, 0, 0, 1, c_white);
        background_index[2] = bg_weather_snow; 
        if(transitionOngoing == true)
        {
            if( background_alpha[2] &lt; 1 - bgWeatherFadeRate)
            {
                background_alpha[2] += bgWeatherFadeRate;
                if (global.snowAmount &lt; 1- bgWeatherFadeRate)
                {
                    global.snowAmount +=  bgWeatherFadeRate;
                }
            }
        }

        break;
        
    case 2: // Raining
        effect_create_above(ef_rain, 0, 0, 1, c_gray);
        background_index[2] = bg_weather_rain; 
        if(transitionOngoing == true)
        {
            if( background_alpha[2] &lt; 1-bgWeatherFadeRate)
            {
                background_alpha[2] += bgWeatherFadeRate;
            }
        }
        break;
}
// ******************************************************************************************************************************************************


if (global.scrollSpeed &gt; 0) // only do anything if the game is moving;
{

// Object generation code
if (encountered == false)
{
    if (step mod event_step = (event_step-1))
    {
        encountered = true;
        
        if(eventSelectorScript() == 0)
        {
        encountered = false;
        }
    }
}

// This will randomise the next event
if (encountered == true)
{
    event_step = round(irandom_range(screenWidth,screenWidth*2));
}


// Loop End Logic ***************************************************************************************************************************************
// Identify the current biome for background
currentBiome = global.biomeIdent;

// Counter increment
step++;
global.pdistance++;


// Reset Counter and change to the next biome
if(step == biomeScreens*screenWidth || global.biomeIdent == 0/*|| biomeForceChange == true) */ ) // Update the biome
{
    step = 0;
    previousBiome = global.biomeIdent;
    global.biomeIdent = irandom_range(1,4); // Random a Biome
    
    // creates a mountain if required
    if (global.biomeIdent == 3)
    {
    inst = instance_create(640, grass_sky_y+hudSize, ob_bg_mountain);
    }
    
    // Prevent transitions from weather to keep it simple
    if(global.weather == 0 &amp;&amp; global.biomeIdent != 0 &amp;&amp; global.biomeIdent != 4)
    {
        global.weather = irandom_range(0,2); // Random weather
        if(global.weather == 1 || global.weather == 2)
        {
        inst = instance_create(640, grass_sky_y+hudSize, ob_clouds); // cloud generation
        }
    }
    else
    {
        global.weather = 0;
    }
    
} 
// ******************************************************************************************************************************************************

// End the game
if(global.death == true)
{
        room_persistent = false;
        room_goto(rm_startmenu); 
}

} // endif for the game moving if at the start

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
