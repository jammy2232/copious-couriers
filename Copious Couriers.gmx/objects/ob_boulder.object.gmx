<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boulder_0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth=ob_mwagon.depth-2; //places the boulders in the back (mwagon depth=0, mwheelb depth=-1)
if(random_range(0,10)&gt;5) //determines the initial rolling direction
{
    v=5;
}
else
{
    v=-5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set position

if(instance_exists(ob_mwagon)) //initial boulder positioning if player exists
{
    tx=ob_mwagon.x; //position of player

if((y&gt;=512)||(x&lt;=tx-600 || x&gt;=tx+800)) //checks position of boulder and if it's far enough off-screen it puts it back on top
{
    //put y back on top
    
    y=-64;
    
    //get new x position, dependant on where the player is
    if(ob_mwagon.x&lt;640) //player is still at the start
    {
        x=random_range(512,960); //boulders set to not spawn under 512px because otherwise there's a chance a boulder would fall on the player on the spawn point
    }
    else if(ob_mwagon.x&gt;=1280) //player is at the end
    {
        x=random_range(tx-320,1600); //puts a safe spot at the end of the level
    }
    else
    {
        x=random_range(tx-320,tx+320);
    }
    
    //check for collisions and move to the right if there are any
    //"not self" flag needs to be true otherwise it collides with itself instead of other instances
    while collision_circle(x,y,32,ob_boulder,false,true)
    {
        if(ob_mwagon.x&lt;640) //player is still at the start
        {
            x=random_range(512,960);
        }
        else if(ob_mwagon.x&gt;=1280) //player is at the end
        {
            x=random_range(tx-320,1600);
        }
        else
        {
            x=random_range(tx-320,tx+320);
        }
    }
    
    //set rolling direction and speed
    if(random(10)&lt;5)
    {
        v=-1;
    }
    else
    {
        v=1;
    }
    
    v*=5;
}
}
else if(y&gt;=512) //if player dies the boulders instances get destroyed once off screen
{
    instance_destroy();
}

//check for collisions
//precise collision is on because otherwise it could get kinda janky
if collision_circle(x,y,32,ob_boulder,true,true)
{
    v*=-1;
    if !audio_is_playing(snd_boulderBounce)&amp;&amp;(y&gt;=0)
    {
        audio_play_sound(snd_boulderBounce,10,false);
    }
}

if !audio_is_playing(snd_rumble)
{
    audio_play_sound(snd_rumble,10,false);
}

//boulder movement
x+=v;
y+=7.5;
image_angle-=v;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
